/*
 * Mittwald API
 *
 * ## Introduction  This OpenAPI spec documents the mittwald API. It follows the [OpenAPI 3.0.0 specification](https://spec.openapis.org/oas/v3.0.0.html).  ## Authentication  You will need an API token to access the API. You can obtain one by logging into the [mStudio](https://studio.mittwald.de) and navigating to the [\"API Tokens\" section in the user menu](https://studio.mittwald.de/app/profile/api-tokens).  When making requests to the API, you can authenticate by passing your API token in the `X-Access-Token` header or as a bearer token.  ## Rate Limiting  Please note that usage of the API is rate-limited to prevent abuse. You can inspect the rate limiting for your current user by observing the `X-Ratelimit-*` headers included in each response.  ## mStudio  A main consumer of the mittwald API is the management interface for our customers, the [mStudio](https://studio.mittwald.de).  ## Contact and support  For support, please use the [mStudio support area](https://studio.mittwald.de/app/support/conversations) or drop us an email at [support@mittwald.de](mailto:support@mittwald.de).  For security issues, please report to [security@mittwald.de](mailto:security@mittwald.de). 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// DePeriodMittwaldPeriodV1PeriodSshuserPeriodSftpUser : A representation of an SFTPUser.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DePeriodMittwaldPeriodV1PeriodSshuserPeriodSftpUser {
    #[serde(rename = "accessLevel")]
    pub access_level: models::DePeriodMittwaldPeriodV1PeriodSshuserPeriodAccessLevel,
    #[serde(rename = "active", skip_serializing_if = "Option::is_none")]
    pub active: Option<bool>,
    #[serde(rename = "authUpdatedAt")]
    pub auth_updated_at: String,
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "directories", skip_serializing_if = "Option::is_none")]
    pub directories: Option<Vec<String>>,
    #[serde(rename = "expiresAt", skip_serializing_if = "Option::is_none")]
    pub expires_at: Option<String>,
    #[serde(rename = "hasPassword")]
    pub has_password: bool,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "projectId")]
    pub project_id: String,
    #[serde(rename = "publicKeys", skip_serializing_if = "Option::is_none")]
    pub public_keys: Option<Vec<models::DePeriodMittwaldPeriodV1PeriodSshuserPeriodPublicKey>>,
    #[serde(rename = "updatedAt", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
    #[serde(rename = "userName")]
    pub user_name: String,
}

impl DePeriodMittwaldPeriodV1PeriodSshuserPeriodSftpUser {
    /// A representation of an SFTPUser.
    pub fn new(access_level: models::DePeriodMittwaldPeriodV1PeriodSshuserPeriodAccessLevel, auth_updated_at: String, created_at: String, description: String, has_password: bool, id: String, project_id: String, user_name: String) -> DePeriodMittwaldPeriodV1PeriodSshuserPeriodSftpUser {
        DePeriodMittwaldPeriodV1PeriodSshuserPeriodSftpUser {
            access_level,
            active: None,
            auth_updated_at,
            created_at,
            description,
            directories: None,
            expires_at: None,
            has_password,
            id,
            project_id,
            public_keys: None,
            updated_at: None,
            user_name,
        }
    }
}

