/*
 * Mittwald API
 *
 * ## Introduction  This OpenAPI spec documents the mittwald API. It follows the [OpenAPI 3.0.0 specification](https://spec.openapis.org/oas/v3.0.0.html).  ## Authentication  You will need an API token to access the API. You can obtain one by logging into the [mStudio](https://studio.mittwald.de) and navigating to the [\"API Tokens\" section in the user menu](https://studio.mittwald.de/app/profile/api-tokens).  When making requests to the API, you can authenticate by passing your API token in the `X-Access-Token` header or as a bearer token.  ## Rate Limiting  Please note that usage of the API is rate-limited to prevent abuse. You can inspect the rate limiting for your current user by observing the `X-Ratelimit-*` headers included in each response.  ## mStudio  A main consumer of the mittwald API is the management interface for our customers, the [mStudio](https://studio.mittwald.de).  ## Contact and support  For support, please use the [mStudio support area](https://studio.mittwald.de/app/support/conversations) or drop us an email at [support@mittwald.de](mailto:support@mittwald.de).  For security issues, please report to [security@mittwald.de](mailto:security@mittwald.de). 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct RelocationCreateRelocationRequest {
    /// Should all project releated domains should be transferred to mittwald?
    #[serde(rename = "allDomains", skip_serializing_if = "Option::is_none")]
    pub all_domains: Option<bool>,
    /// Has to be true. Do you accept that our mittwald team can change and get password from your current provider?
    #[serde(rename = "allowPasswordChange")]
    pub allow_password_change: bool,
    #[serde(rename = "contact")]
    pub contact: Box<models::RelocationCreateRelocationRequestContact>,
    /// List of domains which should be transferred (when allDomains is not checked).
    #[serde(rename = "domains", skip_serializing_if = "Option::is_none")]
    pub domains: Option<Vec<models::DePeriodMittwaldPeriodV1PeriodDirectusPeriodDomain>>,
    /// Anything our customer service needs to know for the relocation process.
    #[serde(rename = "notes", skip_serializing_if = "Option::is_none")]
    pub notes: Option<String>,
    #[serde(rename = "provider")]
    pub provider: Box<models::RelocationCreateRelocationRequestProvider>,
    #[serde(rename = "target")]
    pub target: Box<models::RelocationCreateRelocationRequestTarget>,
}

impl RelocationCreateRelocationRequest {
    pub fn new(allow_password_change: bool, contact: models::RelocationCreateRelocationRequestContact, provider: models::RelocationCreateRelocationRequestProvider, target: models::RelocationCreateRelocationRequestTarget) -> RelocationCreateRelocationRequest {
        RelocationCreateRelocationRequest {
            all_domains: None,
            allow_password_change,
            contact: Box::new(contact),
            domains: None,
            notes: None,
            provider: Box::new(provider),
            target: Box::new(target),
        }
    }
}

