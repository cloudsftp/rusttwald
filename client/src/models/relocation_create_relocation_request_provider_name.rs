/*
 * Mittwald API
 *
 * ## Introduction  This OpenAPI spec documents the mittwald API. It follows the [OpenAPI 3.0.0 specification](https://spec.openapis.org/oas/v3.0.0.html).  ## Authentication  You will need an API token to access the API. You can obtain one by logging into the [mStudio](https://studio.mittwald.de) and navigating to the [\"API Tokens\" section in the user menu](https://studio.mittwald.de/app/profile/api-tokens).  When making requests to the API, you can authenticate by passing your API token in the `X-Access-Token` header or as a bearer token.  ## Rate Limiting  Please note that usage of the API is rate-limited to prevent abuse. You can inspect the rate limiting for your current user by observing the `X-Ratelimit-*` headers included in each response.  ## mStudio  A main consumer of the mittwald API is the management interface for our customers, the [mStudio](https://studio.mittwald.de).  ## Contact and support  For support, please use the [mStudio support area](https://studio.mittwald.de/app/support/conversations) or drop us an email at [support@mittwald.de](mailto:support@mittwald.de).  For security issues, please report to [security@mittwald.de](mailto:security@mittwald.de).
 *
 * The version of the OpenAPI document: 2.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{de::Visitor, Deserialize, Serialize};

/// RelocationCreateRelocationRequestProviderName : Name of your provider
/// Name of your provider
#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub enum RelocationCreateRelocationRequestProviderName {
    #[serde(rename = "1und1")]
    EinsUnsEins,
    #[serde(rename = "strato")]
    Strato,
    #[serde(untagged)]
    Other(String),
}

impl Default for RelocationCreateRelocationRequestProviderName {
    fn default() -> Self {
        Self::Other(Default::default())
    }
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test_ser_empty() {
        let variant = RelocationCreateRelocationRequestProviderName::Other("".to_string());
        assert_eq!(
            serde_json::to_string(&variant).expect("could not serialize"),
            r#""""#
        );
    }

    #[test]
    fn test_de_empty() {
        let raw = r#""""#;
        assert_eq!(
            RelocationCreateRelocationRequestProviderName::Other("".to_string()),
            serde_json::from_str(raw).expect("could not decode"),
        );
    }

    #[test]
    fn test_ser_1und1() {
        let variant = RelocationCreateRelocationRequestProviderName::EinsUnsEins;
        assert_eq!(
            serde_json::to_string(&variant).expect("could not serialize"),
            r#""1und1""#
        );
    }

    #[test]
    fn test_de_1und1() {
        let raw = r#""1und1""#;
        assert_eq!(
            RelocationCreateRelocationRequestProviderName::EinsUnsEins,
            serde_json::from_str(raw).expect("could not decode"),
        );
    }

    #[test]
    fn test_ser_strato() {
        let variant = RelocationCreateRelocationRequestProviderName::Strato;
        assert_eq!(
            serde_json::to_string(&variant).expect("could not serialize"),
            r#""strato""#
        );
    }

    #[test]
    fn test_de_strato() {
        let raw = r#""strato""#;
        assert_eq!(
            RelocationCreateRelocationRequestProviderName::Strato,
            serde_json::from_str(raw).expect("could not decode"),
        );
    }
}
