/*
 * Mittwald API
 *
 * ## Introduction  This OpenAPI spec documents the mittwald API. It follows the [OpenAPI 3.0.0 specification](https://spec.openapis.org/oas/v3.0.0.html).  ## Authentication  You will need an API token to access the API. You can obtain one by logging into the [mStudio](https://studio.mittwald.de) and navigating to the [\"API Tokens\" section in the user menu](https://studio.mittwald.de/app/profile/api-tokens).  When making requests to the API, you can authenticate by passing your API token in the `X-Access-Token` header or as a bearer token.  ## Rate Limiting  Please note that usage of the API is rate-limited to prevent abuse. You can inspect the rate limiting for your current user by observing the `X-Ratelimit-*` headers included in each response.  ## mStudio  A main consumer of the mittwald API is the management interface for our customers, the [mStudio](https://studio.mittwald.de).  ## Contact and support  For support, please use the [mStudio support area](https://studio.mittwald.de/app/support/conversations) or drop us an email at [support@mittwald.de](mailto:support@mittwald.de).  For security issues, please report to [security@mittwald.de](mailto:security@mittwald.de). 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeMittwaldV1StraceDataNetworkingOpsInner {
    #[serde(rename = "connectionType")]
    pub connection_type: ConnectionType,
    /// A short description of the network connection to provide additional context.
    #[serde(rename = "description")]
    pub description: String,
    /// IP address to which a connection was established.
    #[serde(rename = "ip")]
    pub ip: String,
    /// Port to which a connection was established.
    #[serde(rename = "port")]
    pub port: i32,
    #[serde(rename = "stats")]
    pub stats: Box<models::DePeriodMittwaldPeriodV1PeriodStracePeriodStatistics>,
    /// Alerts when the time, syscall count or occurrence count of this group are abnormal.
    #[serde(rename = "warnLevel")]
    pub warn_level: WarnLevel,
}

impl DeMittwaldV1StraceDataNetworkingOpsInner {
    pub fn new(connection_type: ConnectionType, description: String, ip: String, port: i32, stats: models::DePeriodMittwaldPeriodV1PeriodStracePeriodStatistics, warn_level: WarnLevel) -> DeMittwaldV1StraceDataNetworkingOpsInner {
        DeMittwaldV1StraceDataNetworkingOpsInner {
            connection_type,
            description,
            ip,
            port,
            stats: Box::new(stats),
            warn_level,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ConnectionType {
    #[serde(rename = "UNKNOWN")]
    Unknown,
    #[serde(rename = "PRIVATE")]
    Private,
    #[serde(rename = "EXTERNAL")]
    External,
}

impl Default for ConnectionType {
    fn default() -> ConnectionType {
        Self::Unknown
    }
}
/// Alerts when the time, syscall count or occurrence count of this group are abnormal.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum WarnLevel {
    #[serde(rename = "NO")]
    No,
    #[serde(rename = "WARN")]
    Warn,
    #[serde(rename = "SEVERE")]
    Severe,
}

impl Default for WarnLevel {
    fn default() -> WarnLevel {
        Self::No
    }
}

