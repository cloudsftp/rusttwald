/*
 * Mittwald API
 *
 * ## Introduction  This OpenAPI spec documents the mittwald API. It follows the [OpenAPI 3.0.0 specification](https://spec.openapis.org/oas/v3.0.0.html).  ## Authentication  You will need an API token to access the API. You can obtain one by logging into the [mStudio](https://studio.mittwald.de) and navigating to the [\"API Tokens\" section in the user menu](https://studio.mittwald.de/app/profile/api-tokens).  When making requests to the API, you can authenticate by passing your API token in the `X-Access-Token` header or as a bearer token.  ## Rate Limiting  Please note that usage of the API is rate-limited to prevent abuse. You can inspect the rate limiting for your current user by observing the `X-Ratelimit-*` headers included in each response.  ## mStudio  A main consumer of the mittwald API is the management interface for our customers, the [mStudio](https://studio.mittwald.de).  ## Contact and support  For support, please use the [mStudio support area](https://studio.mittwald.de/app/support/conversations) or drop us an email at [support@mittwald.de](mailto:support@mittwald.de).  For security issues, please report to [security@mittwald.de](mailto:security@mittwald.de). 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DePeriodMittwaldPeriodV1PeriodSslPeriodCertificate {
    #[serde(rename = "caBundle", skip_serializing_if = "Option::is_none")]
    pub ca_bundle: Option<String>,
    #[serde(rename = "certificate")]
    pub certificate: String,
    #[serde(rename = "certificateOrderId", skip_serializing_if = "Option::is_none")]
    pub certificate_order_id: Option<uuid::Uuid>,
    #[serde(rename = "certificateRequestId")]
    pub certificate_request_id: uuid::Uuid,
    #[serde(rename = "certificateType")]
    pub certificate_type: models::DePeriodMittwaldPeriodV1PeriodSslPeriodCertificateType,
    #[serde(rename = "commonName", skip_serializing_if = "Option::is_none")]
    pub common_name: Option<String>,
    #[serde(rename = "contact", skip_serializing_if = "Option::is_none")]
    pub contact: Option<Box<models::DePeriodMittwaldPeriodV1PeriodSslPeriodContact>>,
    #[serde(rename = "dnsNames", skip_serializing_if = "Option::is_none")]
    pub dns_names: Option<Vec<String>>,
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "isExpired")]
    pub is_expired: bool,
    #[serde(rename = "issuer", skip_serializing_if = "Option::is_none")]
    pub issuer: Option<String>,
    #[serde(rename = "lastExpirationThresholdHit")]
    pub last_expiration_threshold_hit: i32,
    #[serde(rename = "projectId")]
    pub project_id: uuid::Uuid,
    #[serde(rename = "validFrom")]
    pub valid_from: String,
    #[serde(rename = "validTo")]
    pub valid_to: String,
}

impl DePeriodMittwaldPeriodV1PeriodSslPeriodCertificate {
    pub fn new(certificate: String, certificate_request_id: uuid::Uuid, certificate_type: models::DePeriodMittwaldPeriodV1PeriodSslPeriodCertificateType, id: uuid::Uuid, is_expired: bool, last_expiration_threshold_hit: i32, project_id: uuid::Uuid, valid_from: String, valid_to: String) -> DePeriodMittwaldPeriodV1PeriodSslPeriodCertificate {
        DePeriodMittwaldPeriodV1PeriodSslPeriodCertificate {
            ca_bundle: None,
            certificate,
            certificate_order_id: None,
            certificate_request_id,
            certificate_type,
            common_name: None,
            contact: None,
            dns_names: None,
            id,
            is_expired,
            issuer: None,
            last_expiration_threshold_hit,
            project_id,
            valid_from,
            valid_to,
        }
    }
}

