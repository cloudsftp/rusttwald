/*
 * Mittwald API
 *
 * ## Introduction  This OpenAPI spec documents the mittwald API. It follows the [OpenAPI 3.0.0 specification](https://spec.openapis.org/oas/v3.0.0.html).  ## Authentication  You will need an API token to access the API. You can obtain one by logging into the [mStudio](https://studio.mittwald.de) and navigating to the [\"API Tokens\" section in the user menu](https://studio.mittwald.de/app/profile/api-tokens).  When making requests to the API, you can authenticate by passing your API token in the `X-Access-Token` header or as a bearer token.  ## Rate Limiting  Please note that usage of the API is rate-limited to prevent abuse. You can inspect the rate limiting for your current user by observing the `X-Ratelimit-*` headers included in each response.  ## mStudio  A main consumer of the mittwald API is the management interface for our customers, the [mStudio](https://studio.mittwald.de).  ## Contact and support  For support, please use the [mStudio support area](https://studio.mittwald.de/app/support/conversations) or drop us an email at [support@mittwald.de](mailto:support@mittwald.de).  For security issues, please report to [security@mittwald.de](mailto:security@mittwald.de). 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DePeriodMittwaldPeriodV1PeriodStracePeriodData {
    #[serde(rename = "actualUrl")]
    pub actual_url: String,
    #[serde(rename = "dbQueries")]
    pub db_queries: Vec<models::DeMittwaldV1StraceDataDbQueriesInner>,
    #[serde(rename = "dbStats")]
    pub db_stats: Box<models::DePeriodMittwaldPeriodV1PeriodStracePeriodStatistics>,
    #[serde(rename = "fileOps")]
    pub file_ops: Vec<models::DeMittwaldV1StraceDataFileOpsInner>,
    #[serde(rename = "fileOpsStats")]
    pub file_ops_stats: Box<models::DePeriodMittwaldPeriodV1PeriodStracePeriodStatistics>,
    #[serde(rename = "miscStats")]
    pub misc_stats: Box<models::DePeriodMittwaldPeriodV1PeriodStracePeriodStatistics>,
    #[serde(rename = "networkingOps")]
    pub networking_ops: Vec<models::DeMittwaldV1StraceDataNetworkingOpsInner>,
    #[serde(rename = "networkingStats")]
    pub networking_stats: Box<models::DePeriodMittwaldPeriodV1PeriodStracePeriodStatistics>,
    /// Shows how much slower the websites TTFB was when it got traced (1.0 = 100% = same TTFB).
    #[serde(rename = "slowdownFactor")]
    pub slowdown_factor: f64,
    /// Time to first byte in milliseconds while tracing the website.
    #[serde(rename = "ttfbMs")]
    pub ttfb_ms: i32,
}

impl DePeriodMittwaldPeriodV1PeriodStracePeriodData {
    pub fn new(actual_url: String, db_queries: Vec<models::DeMittwaldV1StraceDataDbQueriesInner>, db_stats: models::DePeriodMittwaldPeriodV1PeriodStracePeriodStatistics, file_ops: Vec<models::DeMittwaldV1StraceDataFileOpsInner>, file_ops_stats: models::DePeriodMittwaldPeriodV1PeriodStracePeriodStatistics, misc_stats: models::DePeriodMittwaldPeriodV1PeriodStracePeriodStatistics, networking_ops: Vec<models::DeMittwaldV1StraceDataNetworkingOpsInner>, networking_stats: models::DePeriodMittwaldPeriodV1PeriodStracePeriodStatistics, slowdown_factor: f64, ttfb_ms: i32) -> DePeriodMittwaldPeriodV1PeriodStracePeriodData {
        DePeriodMittwaldPeriodV1PeriodStracePeriodData {
            actual_url,
            db_queries,
            db_stats: Box::new(db_stats),
            file_ops,
            file_ops_stats: Box::new(file_ops_stats),
            misc_stats: Box::new(misc_stats),
            networking_ops,
            networking_stats: Box::new(networking_stats),
            slowdown_factor,
            ttfb_ms,
        }
    }
}

