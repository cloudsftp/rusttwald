/*
 * Mittwald API
 *
 * ## Introduction  This OpenAPI spec documents the mittwald API. It follows the [OpenAPI 3.0.0 specification](https://spec.openapis.org/oas/v3.0.0.html).  ## Authentication  You will need an API token to access the API. You can obtain one by logging into the [mStudio](https://studio.mittwald.de) and navigating to the [\"API Tokens\" section in the user menu](https://studio.mittwald.de/app/profile/api-tokens).  When making requests to the API, you can authenticate by passing your API token in the `X-Access-Token` header or as a bearer token.  ## Rate Limiting  Please note that usage of the API is rate-limited to prevent abuse. You can inspect the rate limiting for your current user by observing the `X-Ratelimit-*` headers included in each response.  ## mStudio  A main consumer of the mittwald API is the management interface for our customers, the [mStudio](https://studio.mittwald.de).  ## Contact and support  For support, please use the [mStudio support area](https://studio.mittwald.de/app/support/conversations) or drop us an email at [support@mittwald.de](mailto:support@mittwald.de).  For security issues, please report to [security@mittwald.de](mailto:security@mittwald.de). 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct UserOauthRetrieveAccessToken200Response {
    /// The access token issued by the authorization server. 
    #[serde(rename = "access_token")]
    pub access_token: String,
    /// The lifetime in seconds of the access token. For example, the value \"3600\" denotes that the access token will expire in one hour from the time the response was generated. 
    #[serde(rename = "expires_in")]
    pub expires_in: i32,
    /// The refresh token issued by the authorization server. 
    #[serde(rename = "refresh_token")]
    pub refresh_token: String,
    /// The scope of the access token as described by [RFC6749](https://datatracker.ietf.org/doc/html/rfc6749#section-3.3). 
    #[serde(rename = "scope", skip_serializing_if = "Option::is_none")]
    pub scope: Option<String>,
    /// The type of the token issued as described in [RFC6749](https://datatracker.ietf.org/doc/html/rfc6749#section-7.1). 
    #[serde(rename = "token_type")]
    pub token_type: TokenType,
}

impl UserOauthRetrieveAccessToken200Response {
    pub fn new(access_token: String, expires_in: i32, refresh_token: String, token_type: TokenType) -> UserOauthRetrieveAccessToken200Response {
        UserOauthRetrieveAccessToken200Response {
            access_token,
            expires_in,
            refresh_token,
            scope: None,
            token_type,
        }
    }
}
/// The type of the token issued as described in [RFC6749](https://datatracker.ietf.org/doc/html/rfc6749#section-7.1). 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum TokenType {
    #[serde(rename = "bearer")]
    Bearer,
}

impl Default for TokenType {
    fn default() -> TokenType {
        Self::Bearer
    }
}

