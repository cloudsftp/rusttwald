/*
 * Mittwald API
 *
 * ## Introduction  This OpenAPI spec documents the mittwald API. It follows the [OpenAPI 3.0.0 specification](https://spec.openapis.org/oas/v3.0.0.html).  ## Authentication  You will need an API token to access the API. You can obtain one by logging into the [mStudio](https://studio.mittwald.de) and navigating to the [\"API Tokens\" section in the user menu](https://studio.mittwald.de/app/profile/api-tokens).  When making requests to the API, you can authenticate by passing your API token in the `X-Access-Token` header or as a bearer token.  ## Rate Limiting  Please note that usage of the API is rate-limited to prevent abuse. You can inspect the rate limiting for your current user by observing the `X-Ratelimit-*` headers included in each response.  ## mStudio  A main consumer of the mittwald API is the management interface for our customers, the [mStudio](https://studio.mittwald.de).  ## Contact and support  For support, please use the [mStudio support area](https://studio.mittwald.de/app/support/conversations) or drop us an email at [support@mittwald.de](mailto:support@mittwald.de).  For security issues, please report to [security@mittwald.de](mailto:security@mittwald.de). 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DePeriodMittwaldPeriodV1PeriodInvoicePeriodInvoice {
    #[serde(rename = "amountPaid")]
    pub amount_paid: f64,
    #[serde(rename = "cancellation", skip_serializing_if = "Option::is_none")]
    pub cancellation: Option<Box<models::DePeriodMittwaldPeriodV1PeriodInvoicePeriodCancellation>>,
    /// The ID of the invoice that this invoice cancels.
    #[serde(rename = "cancellationOf", skip_serializing_if = "Option::is_none")]
    pub cancellation_of: Option<uuid::Uuid>,
    #[serde(rename = "currency")]
    pub currency: String,
    #[serde(rename = "customerId")]
    pub customer_id: String,
    #[serde(rename = "date")]
    pub date: String,
    #[serde(rename = "groups")]
    pub groups: Vec<models::DeMittwaldV1InvoiceInvoiceGroupsInner>,
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "invoiceNumber")]
    pub invoice_number: String,
    #[serde(rename = "invoiceType")]
    pub invoice_type: InvoiceType,
    #[serde(rename = "paymentSettings", skip_serializing_if = "Option::is_none")]
    pub payment_settings: Option<Box<models::DePeriodMittwaldPeriodV1PeriodInvoicePeriodPaymentSettings>>,
    #[serde(rename = "pdfId")]
    pub pdf_id: uuid::Uuid,
    #[serde(rename = "recipient")]
    pub recipient: Box<models::DePeriodMittwaldPeriodV1PeriodInvoicePeriodRecipient>,
    #[serde(rename = "status")]
    pub status: Status,
    #[serde(rename = "totalGross")]
    pub total_gross: f64,
    #[serde(rename = "totalNet")]
    pub total_net: f64,
    #[serde(rename = "vatId", skip_serializing_if = "Option::is_none")]
    pub vat_id: Option<String>,
}

impl DePeriodMittwaldPeriodV1PeriodInvoicePeriodInvoice {
    pub fn new(amount_paid: f64, currency: String, customer_id: String, date: String, groups: Vec<models::DeMittwaldV1InvoiceInvoiceGroupsInner>, id: uuid::Uuid, invoice_number: String, invoice_type: InvoiceType, pdf_id: uuid::Uuid, recipient: models::DePeriodMittwaldPeriodV1PeriodInvoicePeriodRecipient, status: Status, total_gross: f64, total_net: f64) -> DePeriodMittwaldPeriodV1PeriodInvoicePeriodInvoice {
        DePeriodMittwaldPeriodV1PeriodInvoicePeriodInvoice {
            amount_paid,
            cancellation: None,
            cancellation_of: None,
            currency,
            customer_id,
            date,
            groups,
            id,
            invoice_number,
            invoice_type,
            payment_settings: None,
            pdf_id,
            recipient: Box::new(recipient),
            status,
            total_gross,
            total_net,
            vat_id: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum InvoiceType {
    #[serde(rename = "REGULAR")]
    Regular,
    #[serde(rename = "REISSUE")]
    Reissue,
    #[serde(rename = "CORRECTION")]
    Correction,
    #[serde(rename = "CANCELLATION")]
    Cancellation,
}

impl Default for InvoiceType {
    fn default() -> InvoiceType {
        Self::Regular
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "NEW")]
    New,
    #[serde(rename = "CONFIRMED")]
    Confirmed,
    #[serde(rename = "DENIED")]
    Denied,
    #[serde(rename = "PAID")]
    Paid,
    #[serde(rename = "PARTIALLY_PAID")]
    PartiallyPaid,
    #[serde(rename = "OVERPAID")]
    Overpaid,
}

impl Default for Status {
    fn default() -> Status {
        Self::New
    }
}

