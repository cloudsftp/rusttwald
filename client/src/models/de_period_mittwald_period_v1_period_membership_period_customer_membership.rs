/*
 * Mittwald API
 *
 * ## Introduction  This OpenAPI spec documents the mittwald API. It follows the [OpenAPI 3.0.0 specification](https://spec.openapis.org/oas/v3.0.0.html).  ## Authentication  You will need an API token to access the API. You can obtain one by logging into the [mStudio](https://studio.mittwald.de) and navigating to the [\"API Tokens\" section in the user menu](https://studio.mittwald.de/app/profile/api-tokens).  When making requests to the API, you can authenticate by passing your API token in the `X-Access-Token` header or as a bearer token.  ## Rate Limiting  Please note that usage of the API is rate-limited to prevent abuse. You can inspect the rate limiting for your current user by observing the `X-Ratelimit-*` headers included in each response.  ## mStudio  A main consumer of the mittwald API is the management interface for our customers, the [mStudio](https://studio.mittwald.de).  ## Contact and support  For support, please use the [mStudio support area](https://studio.mittwald.de/app/support/conversations) or drop us an email at [support@mittwald.de](mailto:support@mittwald.de).  For security issues, please report to [security@mittwald.de](mailto:security@mittwald.de). 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DePeriodMittwaldPeriodV1PeriodMembershipPeriodCustomerMembership {
    /// ID of the Customer the CustomerMembership is for.
    #[serde(rename = "customerId")]
    pub customer_id: uuid::Uuid,
    /// Email used by the invited user.
    #[serde(rename = "email")]
    pub email: String,
    /// Time the CustomerMembership should expire at.
    #[serde(rename = "expiresAt", skip_serializing_if = "Option::is_none")]
    pub expires_at: Option<String>,
    /// ID of the CustomerMembership.
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    /// ID of the CustomerInvite the membership was created from.
    #[serde(rename = "inviteId", skip_serializing_if = "Option::is_none")]
    pub invite_id: Option<uuid::Uuid>,
    /// Date the CustomerMembership was created at.
    #[serde(rename = "memberSince", skip_serializing_if = "Option::is_none")]
    pub member_since: Option<String>,
    /// MFA activated by the user.
    #[serde(rename = "mfa")]
    pub mfa: bool,
    #[serde(rename = "role")]
    pub role: models::DePeriodMittwaldPeriodV1PeriodMembershipPeriodCustomerRoles,
    /// ID of the user the CustomerMembership is for.
    #[serde(rename = "userId")]
    pub user_id: uuid::Uuid,
}

impl DePeriodMittwaldPeriodV1PeriodMembershipPeriodCustomerMembership {
    pub fn new(customer_id: uuid::Uuid, email: String, id: uuid::Uuid, mfa: bool, role: models::DePeriodMittwaldPeriodV1PeriodMembershipPeriodCustomerRoles, user_id: uuid::Uuid) -> DePeriodMittwaldPeriodV1PeriodMembershipPeriodCustomerMembership {
        DePeriodMittwaldPeriodV1PeriodMembershipPeriodCustomerMembership {
            customer_id,
            email,
            expires_at: None,
            id,
            invite_id: None,
            member_since: None,
            mfa,
            role,
            user_id,
        }
    }
}

