/*
 * Mittwald API
 *
 * ## Introduction  This OpenAPI spec documents the mittwald API. It follows the [OpenAPI 3.0.0 specification](https://spec.openapis.org/oas/v3.0.0.html).  ## Authentication  You will need an API token to access the API. You can obtain one by logging into the [mStudio](https://studio.mittwald.de) and navigating to the [\"API Tokens\" section in the user menu](https://studio.mittwald.de/app/profile/api-tokens).  When making requests to the API, you can authenticate by passing your API token in the `X-Access-Token` header or as a bearer token.  ## Rate Limiting  Please note that usage of the API is rate-limited to prevent abuse. You can inspect the rate limiting for your current user by observing the `X-Ratelimit-*` headers included in each response.  ## mStudio  A main consumer of the mittwald API is the management interface for our customers, the [mStudio](https://studio.mittwald.de).  ## Contact and support  For support, please use the [mStudio support area](https://studio.mittwald.de/app/support/conversations) or drop us an email at [support@mittwald.de](mailto:support@mittwald.de).  For security issues, please report to [security@mittwald.de](mailto:security@mittwald.de). 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DePeriodMittwaldPeriodV1PeriodConversationPeriodConversation {
    #[serde(rename = "category", skip_serializing_if = "Option::is_none")]
    pub category: Option<Box<models::DePeriodMittwaldPeriodV1PeriodConversationPeriodCategory>>,
    #[serde(rename = "conversationId")]
    pub conversation_id: uuid::Uuid,
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "createdBy", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<Box<models::DePeriodMittwaldPeriodV1PeriodConversationPeriodUser>>,
    #[serde(rename = "lastMessage", skip_serializing_if = "Option::is_none")]
    pub last_message: Option<Box<models::DeMittwaldV1ConversationConversationLastMessage>>,
    #[serde(rename = "lastMessageAt", skip_serializing_if = "Option::is_none")]
    pub last_message_at: Option<String>,
    #[serde(rename = "lastMessageBy", skip_serializing_if = "Option::is_none")]
    pub last_message_by: Option<Box<models::DePeriodMittwaldPeriodV1PeriodConversationPeriodUser>>,
    #[serde(rename = "mainUser")]
    pub main_user: Box<models::DePeriodMittwaldPeriodV1PeriodConversationPeriodUser>,
    #[serde(rename = "relatedTo", skip_serializing_if = "Option::is_none")]
    pub related_to: Option<Box<models::DePeriodMittwaldPeriodV1PeriodConversationPeriodAggregateReference>>,
    #[serde(rename = "relations", skip_serializing_if = "Option::is_none")]
    pub relations: Option<Vec<models::DePeriodMittwaldPeriodV1PeriodConversationPeriodAggregateReference>>,
    #[serde(rename = "sharedWith", skip_serializing_if = "Option::is_none")]
    pub shared_with: Option<Box<models::DePeriodMittwaldPeriodV1PeriodConversationPeriodAggregateReference>>,
    #[serde(rename = "shortId")]
    pub short_id: String,
    #[serde(rename = "status")]
    pub status: models::DePeriodMittwaldPeriodV1PeriodConversationPeriodStatus,
    #[serde(rename = "title")]
    pub title: String,
    #[serde(rename = "visibility")]
    pub visibility: Visibility,
}

impl DePeriodMittwaldPeriodV1PeriodConversationPeriodConversation {
    pub fn new(conversation_id: uuid::Uuid, created_at: String, main_user: models::DePeriodMittwaldPeriodV1PeriodConversationPeriodUser, short_id: String, status: models::DePeriodMittwaldPeriodV1PeriodConversationPeriodStatus, title: String, visibility: Visibility) -> DePeriodMittwaldPeriodV1PeriodConversationPeriodConversation {
        DePeriodMittwaldPeriodV1PeriodConversationPeriodConversation {
            category: None,
            conversation_id,
            created_at,
            created_by: None,
            last_message: None,
            last_message_at: None,
            last_message_by: None,
            main_user: Box::new(main_user),
            related_to: None,
            relations: None,
            shared_with: None,
            short_id,
            status,
            title,
            visibility,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Visibility {
    #[serde(rename = "shared")]
    Shared,
    #[serde(rename = "private")]
    Private,
}

impl Default for Visibility {
    fn default() -> Visibility {
        Self::Shared
    }
}

