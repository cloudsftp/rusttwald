/*
 * Mittwald API
 *
 * ## Introduction  This OpenAPI spec documents the mittwald API. It follows the [OpenAPI 3.0.0 specification](https://spec.openapis.org/oas/v3.0.0.html).  ## Authentication  You will need an API token to access the API. You can obtain one by logging into the [mStudio](https://studio.mittwald.de) and navigating to the [\"API Tokens\" section in the user menu](https://studio.mittwald.de/app/profile/api-tokens).  When making requests to the API, you can authenticate by passing your API token in the `X-Access-Token` header or as a bearer token.  ## Rate Limiting  Please note that usage of the API is rate-limited to prevent abuse. You can inspect the rate limiting for your current user by observing the `X-Ratelimit-*` headers included in each response.  ## mStudio  A main consumer of the mittwald API is the management interface for our customers, the [mStudio](https://studio.mittwald.de).  ## Contact and support  For support, please use the [mStudio support area](https://studio.mittwald.de/app/support/conversations) or drop us an email at [support@mittwald.de](mailto:support@mittwald.de).  For security issues, please report to [security@mittwald.de](mailto:security@mittwald.de). 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DePeriodMittwaldPeriodV1PeriodDomainPeriodDomain {
    #[serde(rename = "authCode", skip_serializing_if = "Option::is_none")]
    pub auth_code: Option<Box<models::DePeriodMittwaldPeriodV1PeriodDomainPeriodAuthCode>>,
    #[serde(rename = "authCode2", skip_serializing_if = "Option::is_none")]
    pub auth_code2: Option<Box<models::DePeriodMittwaldPeriodV1PeriodDomainPeriodAuthCode2>>,
    #[serde(rename = "connected")]
    pub connected: bool,
    #[serde(rename = "deleted")]
    pub deleted: bool,
    #[serde(rename = "domain")]
    pub domain: String,
    #[serde(rename = "domainId")]
    pub domain_id: uuid::Uuid,
    #[serde(rename = "handles")]
    pub handles: Box<models::DeMittwaldV1DomainDomainHandles>,
    #[serde(rename = "nameservers")]
    pub nameservers: Vec<String>,
    #[serde(rename = "processes", skip_serializing_if = "Option::is_none")]
    pub processes: Option<Vec<models::DePeriodMittwaldPeriodV1PeriodDomainPeriodProcess>>,
    #[serde(rename = "projectId")]
    pub project_id: uuid::Uuid,
    #[serde(rename = "transferInAuthCode", skip_serializing_if = "Option::is_none")]
    pub transfer_in_auth_code: Option<String>,
    #[serde(rename = "usesDefaultNameserver")]
    pub uses_default_nameserver: bool,
}

impl DePeriodMittwaldPeriodV1PeriodDomainPeriodDomain {
    pub fn new(connected: bool, deleted: bool, domain: String, domain_id: uuid::Uuid, handles: models::DeMittwaldV1DomainDomainHandles, nameservers: Vec<String>, project_id: uuid::Uuid, uses_default_nameserver: bool) -> DePeriodMittwaldPeriodV1PeriodDomainPeriodDomain {
        DePeriodMittwaldPeriodV1PeriodDomainPeriodDomain {
            auth_code: None,
            auth_code2: None,
            connected,
            deleted,
            domain,
            domain_id,
            handles: Box::new(handles),
            nameservers,
            processes: None,
            project_id,
            transfer_in_auth_code: None,
            uses_default_nameserver,
        }
    }
}

