/*
 * Mittwald API
 *
 * ## Introduction  This OpenAPI spec documents the mittwald API. It follows the [OpenAPI 3.0.0 specification](https://spec.openapis.org/oas/v3.0.0.html).  ## Authentication  You will need an API token to access the API. You can obtain one by logging into the [mStudio](https://studio.mittwald.de) and navigating to the [\"API Tokens\" section in the user menu](https://studio.mittwald.de/app/profile/api-tokens).  When making requests to the API, you can authenticate by passing your API token in the `X-Access-Token` header or as a bearer token.  ## Rate Limiting  Please note that usage of the API is rate-limited to prevent abuse. You can inspect the rate limiting for your current user by observing the `X-Ratelimit-*` headers included in each response.  ## mStudio  A main consumer of the mittwald API is the management interface for our customers, the [mStudio](https://studio.mittwald.de).  ## Contact and support  For support, please use the [mStudio support area](https://studio.mittwald.de/app/support/conversations) or drop us an email at [support@mittwald.de](mailto:support@mittwald.de).  For security issues, please report to [security@mittwald.de](mailto:security@mittwald.de). 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// DePeriodMittwaldPeriodV1PeriodAppPeriodLinkedDatabase : LinkedDatabase is a reference to a concrete Database and DatabaseUsers.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DePeriodMittwaldPeriodV1PeriodAppPeriodLinkedDatabase {
    #[serde(rename = "databaseId")]
    pub database_id: uuid::Uuid,
    #[serde(rename = "databaseUserIds", skip_serializing_if = "Option::is_none")]
    pub database_user_ids: Option<std::collections::HashMap<String, String>>,
    #[serde(rename = "kind")]
    pub kind: Kind,
    #[serde(rename = "purpose")]
    pub purpose: Purpose,
}

impl DePeriodMittwaldPeriodV1PeriodAppPeriodLinkedDatabase {
    /// LinkedDatabase is a reference to a concrete Database and DatabaseUsers.
    pub fn new(database_id: uuid::Uuid, kind: Kind, purpose: Purpose) -> DePeriodMittwaldPeriodV1PeriodAppPeriodLinkedDatabase {
        DePeriodMittwaldPeriodV1PeriodAppPeriodLinkedDatabase {
            database_id,
            database_user_ids: None,
            kind,
            purpose,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Kind {
    #[serde(rename = "mysql")]
    Mysql,
    #[serde(rename = "redis")]
    Redis,
}

impl Default for Kind {
    fn default() -> Kind {
        Self::Mysql
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Purpose {
    #[serde(rename = "primary")]
    Primary,
    #[serde(rename = "cache")]
    Cache,
    #[serde(rename = "custom")]
    Custom,
}

impl Default for Purpose {
    fn default() -> Purpose {
        Self::Primary
    }
}

