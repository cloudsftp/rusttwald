/*
 * Mittwald API
 *
 * ## Introduction  This OpenAPI spec documents the mittwald API. It follows the [OpenAPI 3.0.0 specification](https://spec.openapis.org/oas/v3.0.0.html).  ## Authentication  You will need an API token to access the API. You can obtain one by logging into the [mStudio](https://studio.mittwald.de) and navigating to the [\"API Tokens\" section in the user menu](https://studio.mittwald.de/app/profile/api-tokens).  When making requests to the API, you can authenticate by passing your API token in the `X-Access-Token` header or as a bearer token.  ## Rate Limiting  Please note that usage of the API is rate-limited to prevent abuse. You can inspect the rate limiting for your current user by observing the `X-Ratelimit-*` headers included in each response.  ## mStudio  A main consumer of the mittwald API is the management interface for our customers, the [mStudio](https://studio.mittwald.de).  ## Contact and support  For support, please use the [mStudio support area](https://studio.mittwald.de/app/support/conversations) or drop us an email at [support@mittwald.de](mailto:support@mittwald.de).  For security issues, please report to [security@mittwald.de](mailto:security@mittwald.de). 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// DePeriodMittwaldPeriodV1PeriodAppPeriodAppVersion : An AppVersion is an officially supported version of an App, containing the necessary and recommended configuration und dependencies.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DePeriodMittwaldPeriodV1PeriodAppPeriodAppVersion {
    #[serde(rename = "appId")]
    pub app_id: uuid::Uuid,
    #[serde(rename = "breakingNote", skip_serializing_if = "Option::is_none")]
    pub breaking_note: Option<Box<models::DePeriodMittwaldPeriodV1PeriodAppPeriodBreakingNote>>,
    #[serde(rename = "databases", skip_serializing_if = "Option::is_none")]
    pub databases: Option<Vec<models::DePeriodMittwaldPeriodV1PeriodAppPeriodDatabaseDependency>>,
    #[serde(rename = "docRoot")]
    pub doc_root: String,
    #[serde(rename = "docRootUserEditable")]
    pub doc_root_user_editable: bool,
    #[serde(rename = "externalVersion")]
    pub external_version: String,
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "internalVersion")]
    pub internal_version: String,
    #[serde(rename = "recommended", skip_serializing_if = "Option::is_none")]
    pub recommended: Option<bool>,
    #[serde(rename = "requestHandler", skip_serializing_if = "Option::is_none")]
    pub request_handler: Option<Box<models::DePeriodMittwaldPeriodV1PeriodAppPeriodRequestHandlerRequirement>>,
    #[serde(rename = "systemSoftwareDependencies", skip_serializing_if = "Option::is_none")]
    pub system_software_dependencies: Option<Vec<models::DePeriodMittwaldPeriodV1PeriodAppPeriodSystemSoftwareDependency>>,
    #[serde(rename = "userInputs", skip_serializing_if = "Option::is_none")]
    pub user_inputs: Option<Vec<models::DePeriodMittwaldPeriodV1PeriodAppPeriodUserInput>>,
}

impl DePeriodMittwaldPeriodV1PeriodAppPeriodAppVersion {
    /// An AppVersion is an officially supported version of an App, containing the necessary and recommended configuration und dependencies.
    pub fn new(app_id: uuid::Uuid, doc_root: String, doc_root_user_editable: bool, external_version: String, id: uuid::Uuid, internal_version: String) -> DePeriodMittwaldPeriodV1PeriodAppPeriodAppVersion {
        DePeriodMittwaldPeriodV1PeriodAppPeriodAppVersion {
            app_id,
            breaking_note: None,
            databases: None,
            doc_root,
            doc_root_user_editable,
            external_version,
            id,
            internal_version,
            recommended: None,
            request_handler: None,
            system_software_dependencies: None,
            user_inputs: None,
        }
    }
}

