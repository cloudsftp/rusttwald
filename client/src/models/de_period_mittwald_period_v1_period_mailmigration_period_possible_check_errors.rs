/*
 * Mittwald API
 *
 * ## Introduction  This OpenAPI spec documents the mittwald API. It follows the [OpenAPI 3.0.0 specification](https://spec.openapis.org/oas/v3.0.0.html).  ## Authentication  You will need an API token to access the API. You can obtain one by logging into the [mStudio](https://studio.mittwald.de) and navigating to the [\"API Tokens\" section in the user menu](https://studio.mittwald.de/app/profile/api-tokens).  When making requests to the API, you can authenticate by passing your API token in the `X-Access-Token` header or as a bearer token.  ## Rate Limiting  Please note that usage of the API is rate-limited to prevent abuse. You can inspect the rate limiting for your current user by observing the `X-Ratelimit-*` headers included in each response.  ## mStudio  A main consumer of the mittwald API is the management interface for our customers, the [mStudio](https://studio.mittwald.de).  ## Contact and support  For support, please use the [mStudio support area](https://studio.mittwald.de/app/support/conversations) or drop us an email at [support@mittwald.de](mailto:support@mittwald.de).  For security issues, please report to [security@mittwald.de](mailto:security@mittwald.de). 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DePeriodMittwaldPeriodV1PeriodMailmigrationPeriodPossibleCheckErrors {
    #[serde(rename = "alreadyExistingMailAddress")]
    pub already_existing_mail_address: Vec<models::DePeriodMittwaldPeriodV1PeriodMailmigrationPeriodCheckMigrationIsPossibleErrorAlreadyExistingMailAddress>,
    #[serde(rename = "ambiguousMailAddressDelivery")]
    pub ambiguous_mail_address_delivery: Vec<models::DePeriodMittwaldPeriodV1PeriodMailmigrationPeriodCheckMigrationIsPossibleErrorAmbiguousMailAddressDelivery>,
    #[serde(rename = "ambiguousMailboxDelivery")]
    pub ambiguous_mailbox_delivery: Vec<models::DePeriodMittwaldPeriodV1PeriodMailmigrationPeriodCheckMigrationIsPossibleErrorAmbiguousMailboxDelivery>,
    #[serde(rename = "catchAllMissingAddress")]
    pub catch_all_missing_address: Vec<models::DePeriodMittwaldPeriodV1PeriodMailmigrationPeriodCheckMigrationIsPossibleErrorCatchAllMissingAddress>,
    #[serde(rename = "catchAllTargetWithoutAlias")]
    pub catch_all_target_without_alias: Vec<models::DePeriodMittwaldPeriodV1PeriodMailmigrationPeriodCheckMigrationIsPossibleErrorCatchAllTargetWithoutAlias>,
    #[serde(rename = "missingVerifiedIngress")]
    pub missing_verified_ingress: Vec<models::DePeriodMittwaldPeriodV1PeriodMailmigrationPeriodCheckMigrationIsPossibleErrorMissingVerifiedIngress>,
}

impl DePeriodMittwaldPeriodV1PeriodMailmigrationPeriodPossibleCheckErrors {
    pub fn new(already_existing_mail_address: Vec<models::DePeriodMittwaldPeriodV1PeriodMailmigrationPeriodCheckMigrationIsPossibleErrorAlreadyExistingMailAddress>, ambiguous_mail_address_delivery: Vec<models::DePeriodMittwaldPeriodV1PeriodMailmigrationPeriodCheckMigrationIsPossibleErrorAmbiguousMailAddressDelivery>, ambiguous_mailbox_delivery: Vec<models::DePeriodMittwaldPeriodV1PeriodMailmigrationPeriodCheckMigrationIsPossibleErrorAmbiguousMailboxDelivery>, catch_all_missing_address: Vec<models::DePeriodMittwaldPeriodV1PeriodMailmigrationPeriodCheckMigrationIsPossibleErrorCatchAllMissingAddress>, catch_all_target_without_alias: Vec<models::DePeriodMittwaldPeriodV1PeriodMailmigrationPeriodCheckMigrationIsPossibleErrorCatchAllTargetWithoutAlias>, missing_verified_ingress: Vec<models::DePeriodMittwaldPeriodV1PeriodMailmigrationPeriodCheckMigrationIsPossibleErrorMissingVerifiedIngress>) -> DePeriodMittwaldPeriodV1PeriodMailmigrationPeriodPossibleCheckErrors {
        DePeriodMittwaldPeriodV1PeriodMailmigrationPeriodPossibleCheckErrors {
            already_existing_mail_address,
            ambiguous_mail_address_delivery,
            ambiguous_mailbox_delivery,
            catch_all_missing_address,
            catch_all_target_without_alias,
            missing_verified_ingress,
        }
    }
}

