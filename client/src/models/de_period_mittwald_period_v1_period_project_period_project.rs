/*
 * Mittwald API
 *
 * ## Introduction  This OpenAPI spec documents the mittwald API. It follows the [OpenAPI 3.0.0 specification](https://spec.openapis.org/oas/v3.0.0.html).  ## Authentication  You will need an API token to access the API. You can obtain one by logging into the [mStudio](https://studio.mittwald.de) and navigating to the [\"API Tokens\" section in the user menu](https://studio.mittwald.de/app/profile/api-tokens).  When making requests to the API, you can authenticate by passing your API token in the `X-Access-Token` header or as a bearer token.  ## Rate Limiting  Please note that usage of the API is rate-limited to prevent abuse. You can inspect the rate limiting for your current user by observing the `X-Ratelimit-*` headers included in each response.  ## mStudio  A main consumer of the mittwald API is the management interface for our customers, the [mStudio](https://studio.mittwald.de).  ## Contact and support  For support, please use the [mStudio support area](https://studio.mittwald.de/app/support/conversations) or drop us an email at [support@mittwald.de](mailto:support@mittwald.de).  For security issues, please report to [security@mittwald.de](mailto:security@mittwald.de).
 *
 * The version of the OpenAPI document: 2.0
 *
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DePeriodMittwaldPeriodV1PeriodProjectPeriodProject {
    #[serde(rename = "clusterDomain", skip_serializing_if = "Option::is_none")]
    pub cluster_domain: Option<String>,
    /// deprecated by property clusterId
    #[serde(rename = "clusterID", skip_serializing_if = "Option::is_none")]
    pub cluster_id_deprecated: Option<String>,
    #[serde(rename = "clusterId", skip_serializing_if = "Option::is_none")]
    pub cluster_id: Option<String>,
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "customerId")]
    pub customer_id: String,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "directories")]
    pub directories: std::collections::HashMap<String, String>,
    #[serde(rename = "disableReason", skip_serializing_if = "Option::is_none")]
    pub disable_reason: Option<models::DePeriodMittwaldPeriodV1PeriodProjectPeriodDisableReason>,
    #[serde(rename = "disabledAt", skip_serializing_if = "Option::is_none")]
    pub disabled_at: Option<String>,
    #[serde(rename = "enabled")]
    pub enabled: bool,
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "imageRefId", skip_serializing_if = "Option::is_none")]
    pub image_ref_id: Option<uuid::Uuid>,
    /// deprecated by property status
    #[serde(rename = "isReady")]
    pub is_ready: bool,
    #[serde(rename = "projectHostingId", skip_serializing_if = "Option::is_none")]
    pub project_hosting_id: Option<uuid::Uuid>,
    #[serde(rename = "readiness")]
    pub readiness:
        models::DePeriodMittwaldPeriodV1PeriodProjectPeriodDeprecatedProjectReadinessStatus,
    #[serde(rename = "serverId", skip_serializing_if = "Option::is_none")]
    pub server_id: Option<uuid::Uuid>,
    #[serde(rename = "serverShortId", skip_serializing_if = "Option::is_none")]
    pub server_short_id: Option<String>,
    #[serde(rename = "shortId")]
    pub short_id: String,
    #[serde(rename = "spec", skip_serializing_if = "Option::is_none")]
    pub spec: Option<Box<models::DeMittwaldV1ProjectProjectSpec>>,
    #[serde(
        rename = "statisticsBaseDomain",
        skip_serializing_if = "Option::is_none"
    )]
    pub statistics_base_domain: Option<String>,
    #[serde(rename = "status")]
    pub status: models::DePeriodMittwaldPeriodV1PeriodProjectPeriodProjectStatus,
    #[serde(rename = "statusSetAt")]
    pub status_set_at: String,
    #[serde(rename = "webStorageUsageInBytes")]
    pub web_storage_usage_in_bytes: i64,
    #[serde(rename = "webStorageUsageInBytesSetAt")]
    pub web_storage_usage_in_bytes_set_at: String,
}

impl DePeriodMittwaldPeriodV1PeriodProjectPeriodProject {
    pub fn new(
        created_at: String,
        customer_id: String,
        description: String,
        directories: std::collections::HashMap<String, String>,
        enabled: bool,
        id: uuid::Uuid,
        is_ready: bool,
        readiness: models::DePeriodMittwaldPeriodV1PeriodProjectPeriodDeprecatedProjectReadinessStatus,
        short_id: String,
        status: models::DePeriodMittwaldPeriodV1PeriodProjectPeriodProjectStatus,
        status_set_at: String,
        web_storage_usage_in_bytes: i64,
        web_storage_usage_in_bytes_set_at: String,
    ) -> DePeriodMittwaldPeriodV1PeriodProjectPeriodProject {
        DePeriodMittwaldPeriodV1PeriodProjectPeriodProject {
            cluster_domain: None,
            cluster_id_deprecated: None,
            cluster_id: None,
            created_at,
            customer_id,
            description,
            directories,
            disable_reason: None,
            disabled_at: None,
            enabled,
            id,
            image_ref_id: None,
            is_ready,
            project_hosting_id: None,
            readiness,
            server_id: None,
            server_short_id: None,
            short_id,
            spec: None,
            statistics_base_domain: None,
            status,
            status_set_at,
            web_storage_usage_in_bytes,
            web_storage_usage_in_bytes_set_at,
        }
    }
}
