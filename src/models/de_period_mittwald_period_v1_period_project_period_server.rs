/*
 * Mittwald API
 *
 * ## Introduction  This OpenAPI spec documents the mittwald API. It follows the [OpenAPI 3.0.0 specification](https://spec.openapis.org/oas/v3.0.0.html).  ## Authentication  You will need an API token to access the API. You can obtain one by logging into the [mStudio](https://studio.mittwald.de) and navigating to the [\"API Tokens\" section in the user menu](https://studio.mittwald.de/app/profile/api-tokens).  When making requests to the API, you can authenticate by passing your API token in the `X-Access-Token` header or as a bearer token.  ## Rate Limiting  Please note that usage of the API is rate-limited to prevent abuse. You can inspect the rate limiting for your current user by observing the `X-Ratelimit-*` headers included in each response.  ## mStudio  A main consumer of the mittwald API is the management interface for our customers, the [mStudio](https://studio.mittwald.de).  ## Contact and support  For support, please use the [mStudio support area](https://studio.mittwald.de/app/support/conversations) or drop us an email at [support@mittwald.de](mailto:support@mittwald.de).  For security issues, please report to [security@mittwald.de](mailto:security@mittwald.de). 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DePeriodMittwaldPeriodV1PeriodProjectPeriodServer {
    #[serde(rename = "clusterName")]
    pub cluster_name: String,
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "customerId")]
    pub customer_id: String,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "disabledReason", skip_serializing_if = "Option::is_none")]
    pub disabled_reason: Option<models::DePeriodMittwaldPeriodV1PeriodProjectPeriodServerDisableReason>,
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "imageRefId", skip_serializing_if = "Option::is_none")]
    pub image_ref_id: Option<uuid::Uuid>,
    #[serde(rename = "machineType")]
    pub machine_type: Box<models::DePeriodMittwaldPeriodV1PeriodProjectPeriodMachineType>,
    #[serde(rename = "readiness")]
    pub readiness: models::DePeriodMittwaldPeriodV1PeriodProjectPeriodDeprecatedServerReadinessStatus,
    #[serde(rename = "shortId")]
    pub short_id: String,
    #[serde(rename = "statisticsBaseDomain", skip_serializing_if = "Option::is_none")]
    pub statistics_base_domain: Option<String>,
    #[serde(rename = "status")]
    pub status: models::DePeriodMittwaldPeriodV1PeriodProjectPeriodServerStatus,
    #[serde(rename = "storage")]
    pub storage: String,
}

impl DePeriodMittwaldPeriodV1PeriodProjectPeriodServer {
    pub fn new(cluster_name: String, created_at: String, customer_id: String, description: String, id: uuid::Uuid, machine_type: models::DePeriodMittwaldPeriodV1PeriodProjectPeriodMachineType, readiness: models::DePeriodMittwaldPeriodV1PeriodProjectPeriodDeprecatedServerReadinessStatus, short_id: String, status: models::DePeriodMittwaldPeriodV1PeriodProjectPeriodServerStatus, storage: String) -> DePeriodMittwaldPeriodV1PeriodProjectPeriodServer {
        DePeriodMittwaldPeriodV1PeriodProjectPeriodServer {
            cluster_name,
            created_at,
            customer_id,
            description,
            disabled_reason: None,
            id,
            image_ref_id: None,
            machine_type: Box::new(machine_type),
            readiness,
            short_id,
            statistics_base_domain: None,
            status,
            storage,
        }
    }
}

