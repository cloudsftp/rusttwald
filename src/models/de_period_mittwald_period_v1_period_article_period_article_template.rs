/*
 * Mittwald API
 *
 * ## Introduction  This OpenAPI spec documents the mittwald API. It follows the [OpenAPI 3.0.0 specification](https://spec.openapis.org/oas/v3.0.0.html).  ## Authentication  You will need an API token to access the API. You can obtain one by logging into the [mStudio](https://studio.mittwald.de) and navigating to the [\"API Tokens\" section in the user menu](https://studio.mittwald.de/app/profile/api-tokens).  When making requests to the API, you can authenticate by passing your API token in the `X-Access-Token` header or as a bearer token.  ## Rate Limiting  Please note that usage of the API is rate-limited to prevent abuse. You can inspect the rate limiting for your current user by observing the `X-Ratelimit-*` headers included in each response.  ## mStudio  A main consumer of the mittwald API is the management interface for our customers, the [mStudio](https://studio.mittwald.de).  ## Contact and support  For support, please use the [mStudio support area](https://studio.mittwald.de/app/support/conversations) or drop us an email at [support@mittwald.de](mailto:support@mittwald.de).  For security issues, please report to [security@mittwald.de](mailto:security@mittwald.de). 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DePeriodMittwaldPeriodV1PeriodArticlePeriodArticleTemplate {
    #[serde(rename = "additionalArticles", skip_serializing_if = "Option::is_none")]
    pub additional_articles: Option<Vec<models::DePeriodMittwaldPeriodV1PeriodArticlePeriodReadableBookableArticleOptions>>,
    #[serde(rename = "addons", skip_serializing_if = "Option::is_none")]
    pub addons: Option<Vec<models::DePeriodMittwaldPeriodV1PeriodArticlePeriodArticleAddons>>,
    #[serde(rename = "attributes", skip_serializing_if = "Option::is_none")]
    pub attributes: Option<Vec<models::DePeriodMittwaldPeriodV1PeriodArticlePeriodArticleAttributes>>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "isManagedByDomain")]
    pub is_managed_by_domain: bool,
    #[serde(rename = "isRecurring")]
    pub is_recurring: bool,
    #[serde(rename = "modifierArticles", skip_serializing_if = "Option::is_none")]
    pub modifier_articles: Option<Vec<models::DePeriodMittwaldPeriodV1PeriodArticlePeriodReadableModifierArticleOptions>>,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "type")]
    pub r#type: Type,
}

impl DePeriodMittwaldPeriodV1PeriodArticlePeriodArticleTemplate {
    pub fn new(id: String, is_managed_by_domain: bool, is_recurring: bool, name: String, r#type: Type) -> DePeriodMittwaldPeriodV1PeriodArticlePeriodArticleTemplate {
        DePeriodMittwaldPeriodV1PeriodArticlePeriodArticleTemplate {
            additional_articles: None,
            addons: None,
            attributes: None,
            description: None,
            id,
            is_managed_by_domain,
            is_recurring,
            modifier_articles: None,
            name,
            r#type,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "miscellaneous")]
    Miscellaneous,
    #[serde(rename = "base")]
    Base,
    #[serde(rename = "additional")]
    Additional,
    #[serde(rename = "modifier")]
    Modifier,
    #[serde(rename = "setup_fee")]
    SetupFee,
}

impl Default for Type {
    fn default() -> Type {
        Self::Miscellaneous
    }
}

