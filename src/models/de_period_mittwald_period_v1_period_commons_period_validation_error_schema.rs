/*
 * Mittwald API
 *
 * ## Introduction  This OpenAPI spec documents the mittwald API. It follows the [OpenAPI 3.0.0 specification](https://spec.openapis.org/oas/v3.0.0.html).  ## Authentication  You will need an API token to access the API. You can obtain one by logging into the [mStudio](https://studio.mittwald.de) and navigating to the [\"API Tokens\" section in the user menu](https://studio.mittwald.de/app/profile/api-tokens).  When making requests to the API, you can authenticate by passing your API token in the `X-Access-Token` header or as a bearer token.  ## Rate Limiting  Please note that usage of the API is rate-limited to prevent abuse. You can inspect the rate limiting for your current user by observing the `X-Ratelimit-*` headers included in each response.  ## mStudio  A main consumer of the mittwald API is the management interface for our customers, the [mStudio](https://studio.mittwald.de).  ## Contact and support  For support, please use the [mStudio support area](https://studio.mittwald.de/app/support/conversations) or drop us an email at [support@mittwald.de](mailto:support@mittwald.de).  For security issues, please report to [security@mittwald.de](mailto:security@mittwald.de). 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DePeriodMittwaldPeriodV1PeriodCommonsPeriodValidationErrorSchema {
    /// The standard error message
    #[serde(rename = "message")]
    pub message: String,
    /// The path to the part of the data that was validated. JavaScript property access notation (e.g., \".prop[1].subProp\") is used. 
    #[serde(rename = "path")]
    pub path: String,
    /// ajv validation error type (e.g. \"format\", \"required\", \"type\") or own validation error types
    #[serde(rename = "type")]
    pub r#type: String,
    /// The object with the additional information about the error that can be used to create custom error messages. Keys depend on the type that failed validation (e.g. \"missingProperty\" for type \"required\") 
    #[serde(rename = "context", skip_serializing_if = "Option::is_none")]
    pub context: Option<std::collections::HashMap<String, String>>,
}

impl DePeriodMittwaldPeriodV1PeriodCommonsPeriodValidationErrorSchema {
    pub fn new(message: String, path: String, r#type: String) -> DePeriodMittwaldPeriodV1PeriodCommonsPeriodValidationErrorSchema {
        DePeriodMittwaldPeriodV1PeriodCommonsPeriodValidationErrorSchema {
            message,
            path,
            r#type,
            context: None,
        }
    }
}

