/*
 * Mittwald API
 *
 * ## Introduction  This OpenAPI spec documents the mittwald API. It follows the [OpenAPI 3.0.0 specification](https://spec.openapis.org/oas/v3.0.0.html).  ## Authentication  You will need an API token to access the API. You can obtain one by logging into the [mStudio](https://studio.mittwald.de) and navigating to the [\"API Tokens\" section in the user menu](https://studio.mittwald.de/app/profile/api-tokens).  When making requests to the API, you can authenticate by passing your API token in the `X-Access-Token` header or as a bearer token.  ## Rate Limiting  Please note that usage of the API is rate-limited to prevent abuse. You can inspect the rate limiting for your current user by observing the `X-Ratelimit-*` headers included in each response.  ## mStudio  A main consumer of the mittwald API is the management interface for our customers, the [mStudio](https://studio.mittwald.de).  ## Contact and support  For support, please use the [mStudio support area](https://studio.mittwald.de/app/support/conversations) or drop us an email at [support@mittwald.de](mailto:support@mittwald.de).  For security issues, please report to [security@mittwald.de](mailto:security@mittwald.de). 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DePeriodMittwaldPeriodV1PeriodDatabasePeriodRedisDatabase {
    #[serde(rename = "configuration", skip_serializing_if = "Option::is_none")]
    pub configuration: Option<Box<models::DePeriodMittwaldPeriodV1PeriodDatabasePeriodRedisDatabaseConfiguration>>,
    #[serde(rename = "createdAt")]
    pub created_at: String,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "finalizers", skip_serializing_if = "Option::is_none")]
    pub finalizers: Option<Vec<String>>,
    #[serde(rename = "hostname")]
    pub hostname: String,
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "port")]
    pub port: i32,
    #[serde(rename = "projectId")]
    pub project_id: uuid::Uuid,
    #[serde(rename = "status")]
    pub status: models::DePeriodMittwaldPeriodV1PeriodDatabasePeriodDatabaseStatus,
    #[serde(rename = "statusSetAt")]
    pub status_set_at: String,
    #[serde(rename = "storageUsageInBytes")]
    pub storage_usage_in_bytes: i32,
    #[serde(rename = "storageUsageInBytesSetAt")]
    pub storage_usage_in_bytes_set_at: String,
    #[serde(rename = "updatedAt")]
    pub updated_at: String,
    #[serde(rename = "version")]
    pub version: String,
}

impl DePeriodMittwaldPeriodV1PeriodDatabasePeriodRedisDatabase {
    pub fn new(created_at: String, description: String, hostname: String, id: uuid::Uuid, name: String, port: i32, project_id: uuid::Uuid, status: models::DePeriodMittwaldPeriodV1PeriodDatabasePeriodDatabaseStatus, status_set_at: String, storage_usage_in_bytes: i32, storage_usage_in_bytes_set_at: String, updated_at: String, version: String) -> DePeriodMittwaldPeriodV1PeriodDatabasePeriodRedisDatabase {
        DePeriodMittwaldPeriodV1PeriodDatabasePeriodRedisDatabase {
            configuration: None,
            created_at,
            description,
            finalizers: None,
            hostname,
            id,
            name,
            port,
            project_id,
            status,
            status_set_at,
            storage_usage_in_bytes,
            storage_usage_in_bytes_set_at,
            updated_at,
            version,
        }
    }
}

