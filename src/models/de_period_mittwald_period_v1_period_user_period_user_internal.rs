/*
 * Mittwald API
 *
 * ## Introduction  This OpenAPI spec documents the mittwald API. It follows the [OpenAPI 3.0.0 specification](https://spec.openapis.org/oas/v3.0.0.html).  ## Authentication  You will need an API token to access the API. You can obtain one by logging into the [mStudio](https://studio.mittwald.de) and navigating to the [\"API Tokens\" section in the user menu](https://studio.mittwald.de/app/profile/api-tokens).  When making requests to the API, you can authenticate by passing your API token in the `X-Access-Token` header or as a bearer token.  ## Rate Limiting  Please note that usage of the API is rate-limited to prevent abuse. You can inspect the rate limiting for your current user by observing the `X-Ratelimit-*` headers included in each response.  ## mStudio  A main consumer of the mittwald API is the management interface for our customers, the [mStudio](https://studio.mittwald.de).  ## Contact and support  For support, please use the [mStudio support area](https://studio.mittwald.de/app/support/conversations) or drop us an email at [support@mittwald.de](mailto:support@mittwald.de).  For security issues, please report to [security@mittwald.de](mailto:security@mittwald.de). 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DePeriodMittwaldPeriodV1PeriodUserPeriodUserInternal {
    #[serde(rename = "avatarRef", skip_serializing_if = "Option::is_none")]
    pub avatar_ref: Option<uuid::Uuid>,
    /// Truth value, whether the user has been disabled.
    #[serde(rename = "disabled", skip_serializing_if = "Option::is_none")]
    pub disabled: Option<bool>,
    #[serde(rename = "email", skip_serializing_if = "Option::is_none")]
    pub email: Option<String>,
    #[serde(rename = "employeeInformation", skip_serializing_if = "Option::is_none")]
    pub employee_information: Option<Box<models::DeMittwaldV1UserUserEmployeeInformation>>,
    #[serde(rename = "mfa", skip_serializing_if = "Option::is_none")]
    pub mfa: Option<Box<models::DeMittwaldV1UserUserMfa>>,
    #[serde(rename = "passwordUpdatedAt", skip_serializing_if = "Option::is_none")]
    pub password_updated_at: Option<String>,
    #[serde(rename = "person")]
    pub person: Box<models::DePeriodMittwaldPeriodV1PeriodCommonsPeriodPerson>,
    #[serde(rename = "phoneNumber", skip_serializing_if = "Option::is_none")]
    pub phone_number: Option<String>,
    #[serde(rename = "registeredAt", skip_serializing_if = "Option::is_none")]
    pub registered_at: Option<String>,
    #[serde(rename = "userId")]
    pub user_id: uuid::Uuid,
}

impl DePeriodMittwaldPeriodV1PeriodUserPeriodUserInternal {
    pub fn new(person: models::DePeriodMittwaldPeriodV1PeriodCommonsPeriodPerson, user_id: uuid::Uuid) -> DePeriodMittwaldPeriodV1PeriodUserPeriodUserInternal {
        DePeriodMittwaldPeriodV1PeriodUserPeriodUserInternal {
            avatar_ref: None,
            disabled: None,
            email: None,
            employee_information: None,
            mfa: None,
            password_updated_at: None,
            person: Box::new(person),
            phone_number: None,
            registered_at: None,
            user_id,
        }
    }
}

