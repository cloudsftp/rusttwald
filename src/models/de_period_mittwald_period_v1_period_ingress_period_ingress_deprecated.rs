/*
 * Mittwald API
 *
 * ## Introduction  This OpenAPI spec documents the mittwald API. It follows the [OpenAPI 3.0.0 specification](https://spec.openapis.org/oas/v3.0.0.html).  ## Authentication  You will need an API token to access the API. You can obtain one by logging into the [mStudio](https://studio.mittwald.de) and navigating to the [\"API Tokens\" section in the user menu](https://studio.mittwald.de/app/profile/api-tokens).  When making requests to the API, you can authenticate by passing your API token in the `X-Access-Token` header or as a bearer token.  ## Rate Limiting  Please note that usage of the API is rate-limited to prevent abuse. You can inspect the rate limiting for your current user by observing the `X-Ratelimit-*` headers included in each response.  ## mStudio  A main consumer of the mittwald API is the management interface for our customers, the [mStudio](https://studio.mittwald.de).  ## Contact and support  For support, please use the [mStudio support area](https://studio.mittwald.de/app/support/conversations) or drop us an email at [support@mittwald.de](mailto:support@mittwald.de).  For security issues, please report to [security@mittwald.de](mailto:security@mittwald.de). 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DePeriodMittwaldPeriodV1PeriodIngressPeriodIngressDeprecated {
    /// A list of errors that occurred while validating the ingress's dns before requesting a certificate.
    #[serde(rename = "dnsValidationErrors")]
    pub dns_validation_errors: Vec<DnsValidationErrors>,
    #[serde(rename = "hostname")]
    pub hostname: String,
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "ips")]
    pub ips: Box<models::DeMittwaldV1IngressIngressIps>,
    /// Whether this ingress is the default ingress or not. A default ingress is automatically created, it cannot be deleted. There can be only one default ingress per project.
    #[serde(rename = "isDefault")]
    pub is_default: bool,
    #[serde(rename = "isDomain", skip_serializing_if = "Option::is_none")]
    pub is_domain: Option<bool>,
    #[serde(rename = "isEnabled")]
    pub is_enabled: bool,
    #[serde(rename = "ownership")]
    pub ownership: Box<models::DePeriodMittwaldPeriodV1PeriodIngressPeriodOwnership>,
    /// A list of paths. The default path `/` is always present and cannot be removed.
    #[serde(rename = "paths")]
    pub paths: Vec<models::DePeriodMittwaldPeriodV1PeriodIngressPeriodPath>,
    #[serde(rename = "projectId")]
    pub project_id: uuid::Uuid,
    #[serde(rename = "tls")]
    pub tls: Box<models::DeMittwaldV1IngressIngressDeprecatedTls>,
}

impl DePeriodMittwaldPeriodV1PeriodIngressPeriodIngressDeprecated {
    pub fn new(dns_validation_errors: Vec<DnsValidationErrors>, hostname: String, id: uuid::Uuid, ips: models::DeMittwaldV1IngressIngressIps, is_default: bool, is_enabled: bool, ownership: models::DePeriodMittwaldPeriodV1PeriodIngressPeriodOwnership, paths: Vec<models::DePeriodMittwaldPeriodV1PeriodIngressPeriodPath>, project_id: uuid::Uuid, tls: models::DeMittwaldV1IngressIngressDeprecatedTls) -> DePeriodMittwaldPeriodV1PeriodIngressPeriodIngressDeprecated {
        DePeriodMittwaldPeriodV1PeriodIngressPeriodIngressDeprecated {
            dns_validation_errors,
            hostname,
            id,
            ips: Box::new(ips),
            is_default,
            is_domain: None,
            is_enabled,
            ownership: Box::new(ownership),
            paths,
            project_id,
            tls: Box::new(tls),
        }
    }
}
/// A list of errors that occurred while validating the ingress's dns before requesting a certificate.
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum DnsValidationErrors {
    #[serde(rename = "ERROR_UNSPECIFIED")]
    Unspecified,
    #[serde(rename = "ERROR_QUAD_A")]
    QuadA,
    #[serde(rename = "ERROR_NO_A_RECORD")]
    NoARecord,
    #[serde(rename = "ERROR_ACME_CERTIFICATE_REQUEST_DEADLINE_EXCEEDED")]
    AcmeCertificateRequestDeadlineExceeded,
}

impl Default for DnsValidationErrors {
    fn default() -> DnsValidationErrors {
        Self::Unspecified
    }
}

