/*
 * Mittwald API
 *
 * ## Introduction  This OpenAPI spec documents the mittwald API. It follows the [OpenAPI 3.0.0 specification](https://spec.openapis.org/oas/v3.0.0.html).  ## Authentication  You will need an API token to access the API. You can obtain one by logging into the [mStudio](https://studio.mittwald.de) and navigating to the [\"API Tokens\" section in the user menu](https://studio.mittwald.de/app/profile/api-tokens).  When making requests to the API, you can authenticate by passing your API token in the `X-Access-Token` header or as a bearer token.  ## Rate Limiting  Please note that usage of the API is rate-limited to prevent abuse. You can inspect the rate limiting for your current user by observing the `X-Ratelimit-*` headers included in each response.  ## mStudio  A main consumer of the mittwald API is the management interface for our customers, the [mStudio](https://studio.mittwald.de).  ## Contact and support  For support, please use the [mStudio support area](https://studio.mittwald.de/app/support/conversations) or drop us an email at [support@mittwald.de](mailto:support@mittwald.de).  For security issues, please report to [security@mittwald.de](mailto:security@mittwald.de). 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DePeriodMittwaldPeriodV1PeriodMarketplacePeriodExtension {
    #[serde(rename = "blocked")]
    pub blocked: bool,
    #[serde(rename = "context")]
    pub context: models::DePeriodMittwaldPeriodV1PeriodMarketplacePeriodContext,
    #[serde(rename = "contributorId")]
    pub contributor_id: uuid::Uuid,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "detailedDescriptions", skip_serializing_if = "Option::is_none")]
    pub detailed_descriptions: Option<Box<models::DePeriodMittwaldPeriodV1PeriodMarketplacePeriodDetailedDescriptions>>,
    #[serde(rename = "disabled")]
    pub disabled: bool,
    #[serde(rename = "frontendComponents", skip_serializing_if = "Option::is_none")]
    pub frontend_components: Option<Vec<models::DePeriodMittwaldPeriodV1PeriodMarketplacePeriodExternalComponent>>,
    #[serde(rename = "frontendFragments", skip_serializing_if = "Option::is_none")]
    pub frontend_fragments: Option<std::collections::HashMap<String, models::DePeriodMittwaldPeriodV1PeriodMarketplacePeriodFrontendFragment>>,
    #[serde(rename = "id")]
    pub id: uuid::Uuid,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "scopes")]
    pub scopes: Vec<String>,
    #[serde(rename = "support")]
    pub support: Box<models::DePeriodMittwaldPeriodV1PeriodMarketplacePeriodSupportMeta>,
    #[serde(rename = "tags")]
    pub tags: Vec<String>,
}

impl DePeriodMittwaldPeriodV1PeriodMarketplacePeriodExtension {
    pub fn new(blocked: bool, context: models::DePeriodMittwaldPeriodV1PeriodMarketplacePeriodContext, contributor_id: uuid::Uuid, description: String, disabled: bool, id: uuid::Uuid, name: String, scopes: Vec<String>, support: models::DePeriodMittwaldPeriodV1PeriodMarketplacePeriodSupportMeta, tags: Vec<String>) -> DePeriodMittwaldPeriodV1PeriodMarketplacePeriodExtension {
        DePeriodMittwaldPeriodV1PeriodMarketplacePeriodExtension {
            blocked,
            context,
            contributor_id,
            description,
            detailed_descriptions: None,
            disabled,
            frontend_components: None,
            frontend_fragments: None,
            id,
            name,
            scopes,
            support: Box::new(support),
            tags,
        }
    }
}

