/*
 * Mittwald API
 *
 * ## Introduction  This OpenAPI spec documents the mittwald API. It follows the [OpenAPI 3.0.0 specification](https://spec.openapis.org/oas/v3.0.0.html).  ## Authentication  You will need an API token to access the API. You can obtain one by logging into the [mStudio](https://studio.mittwald.de) and navigating to the [\"API Tokens\" section in the user menu](https://studio.mittwald.de/app/profile/api-tokens).  When making requests to the API, you can authenticate by passing your API token in the `X-Access-Token` header or as a bearer token.  ## Rate Limiting  Please note that usage of the API is rate-limited to prevent abuse. You can inspect the rate limiting for your current user by observing the `X-Ratelimit-*` headers included in each response.  ## mStudio  A main consumer of the mittwald API is the management interface for our customers, the [mStudio](https://studio.mittwald.de).  ## Contact and support  For support, please use the [mStudio support area](https://studio.mittwald.de/app/support/conversations) or drop us an email at [support@mittwald.de](mailto:support@mittwald.de).  For security issues, please report to [security@mittwald.de](mailto:security@mittwald.de). 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DePeriodMittwaldPeriodV1PeriodContractPeriodContractItem {
    #[serde(rename = "activationDate", skip_serializing_if = "Option::is_none")]
    pub activation_date: Option<String>,
    #[serde(rename = "aggregateReference", skip_serializing_if = "Option::is_none")]
    pub aggregate_reference: Option<Box<models::DePeriodMittwaldPeriodV1PeriodContractPeriodAggregateReference>>,
    #[serde(rename = "articles")]
    pub articles: Vec<models::DePeriodMittwaldPeriodV1PeriodContractPeriodArticle>,
    #[serde(rename = "contractPeriod")]
    pub contract_period: f64,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "freeTrialDays", skip_serializing_if = "Option::is_none")]
    pub free_trial_days: Option<f64>,
    #[serde(rename = "groupByProjectId", skip_serializing_if = "Option::is_none")]
    pub group_by_project_id: Option<uuid::Uuid>,
    /// If this attribute is set, the contract item will currently only be invoiced until this date.
    #[serde(rename = "invoiceStop", skip_serializing_if = "Option::is_none")]
    pub invoice_stop: Option<String>,
    #[serde(rename = "invoicingPeriod", skip_serializing_if = "Option::is_none")]
    pub invoicing_period: Option<f64>,
    #[serde(rename = "isActivated")]
    pub is_activated: bool,
    #[serde(rename = "isBaseItem")]
    pub is_base_item: bool,
    #[serde(rename = "isInFreeTrial", skip_serializing_if = "Option::is_none")]
    pub is_in_free_trial: Option<bool>,
    #[serde(rename = "isInclusive", skip_serializing_if = "Option::is_none")]
    pub is_inclusive: Option<bool>,
    #[serde(rename = "itemId")]
    pub item_id: uuid::Uuid,
    /// If this attribute is not set, termination is not allowed.
    #[serde(rename = "nextPossibleDowngradeDate", skip_serializing_if = "Option::is_none")]
    pub next_possible_downgrade_date: Option<String>,
    /// If this attribute is not set, a tariff change is not allowed.
    #[serde(rename = "nextPossibleTerminationDate", skip_serializing_if = "Option::is_none")]
    pub next_possible_termination_date: Option<String>,
    /// If this attribute is not set, a tariff change is not allowed.
    #[serde(rename = "nextPossibleUpgradeDate", skip_serializing_if = "Option::is_none")]
    pub next_possible_upgrade_date: Option<String>,
    #[serde(rename = "orderDate", skip_serializing_if = "Option::is_none")]
    pub order_date: Option<String>,
    #[serde(rename = "orderId", skip_serializing_if = "Option::is_none")]
    pub order_id: Option<uuid::Uuid>,
    #[serde(rename = "replacedByItem", skip_serializing_if = "Option::is_none")]
    pub replaced_by_item: Option<uuid::Uuid>,
    #[serde(rename = "tariffChange", skip_serializing_if = "Option::is_none")]
    pub tariff_change: Option<Box<models::DePeriodMittwaldPeriodV1PeriodContractPeriodTariffChange>>,
    #[serde(rename = "termination", skip_serializing_if = "Option::is_none")]
    pub termination: Option<Box<models::DePeriodMittwaldPeriodV1PeriodContractPeriodTermination>>,
    #[serde(rename = "totalPrice")]
    pub total_price: Box<models::DePeriodMittwaldPeriodV1PeriodContractPeriodPrice>,
}

impl DePeriodMittwaldPeriodV1PeriodContractPeriodContractItem {
    pub fn new(articles: Vec<models::DePeriodMittwaldPeriodV1PeriodContractPeriodArticle>, contract_period: f64, description: String, is_activated: bool, is_base_item: bool, item_id: uuid::Uuid, total_price: models::DePeriodMittwaldPeriodV1PeriodContractPeriodPrice) -> DePeriodMittwaldPeriodV1PeriodContractPeriodContractItem {
        DePeriodMittwaldPeriodV1PeriodContractPeriodContractItem {
            activation_date: None,
            aggregate_reference: None,
            articles,
            contract_period,
            description,
            free_trial_days: None,
            group_by_project_id: None,
            invoice_stop: None,
            invoicing_period: None,
            is_activated,
            is_base_item,
            is_in_free_trial: None,
            is_inclusive: None,
            item_id,
            next_possible_downgrade_date: None,
            next_possible_termination_date: None,
            next_possible_upgrade_date: None,
            order_date: None,
            order_id: None,
            replaced_by_item: None,
            tariff_change: None,
            termination: None,
            total_price: Box::new(total_price),
        }
    }
}

