/*
 * Mittwald API
 *
 * ## Introduction  This OpenAPI spec documents the mittwald API. It follows the [OpenAPI 3.0.0 specification](https://spec.openapis.org/oas/v3.0.0.html).  ## Authentication  You will need an API token to access the API. You can obtain one by logging into the [mStudio](https://studio.mittwald.de) and navigating to the [\"API Tokens\" section in the user menu](https://studio.mittwald.de/app/profile/api-tokens).  When making requests to the API, you can authenticate by passing your API token in the `X-Access-Token` header or as a bearer token.  ## Rate Limiting  Please note that usage of the API is rate-limited to prevent abuse. You can inspect the rate limiting for your current user by observing the `X-Ratelimit-*` headers included in each response.  ## mStudio  A main consumer of the mittwald API is the management interface for our customers, the [mStudio](https://studio.mittwald.de).  ## Contact and support  For support, please use the [mStudio support area](https://studio.mittwald.de/app/support/conversations) or drop us an email at [support@mittwald.de](mailto:support@mittwald.de).  For security issues, please report to [security@mittwald.de](mailto:security@mittwald.de). 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DePeriodMittwaldPeriodV1PeriodOrderPeriodCustomerOrder {
    #[serde(rename = "contractChangeContractId", skip_serializing_if = "Option::is_none")]
    pub contract_change_contract_id: Option<uuid::Uuid>,
    #[serde(rename = "customerId")]
    pub customer_id: String,
    #[serde(rename = "dueDate", skip_serializing_if = "Option::is_none")]
    pub due_date: Option<String>,
    /// Invoicing period in months
    #[serde(rename = "invoicingPeriod")]
    pub invoicing_period: f64,
    #[serde(rename = "items")]
    pub items: Vec<models::DePeriodMittwaldPeriodV1PeriodOrderPeriodOrderItem>,
    #[serde(rename = "orderDate", skip_serializing_if = "Option::is_none")]
    pub order_date: Option<String>,
    #[serde(rename = "orderId")]
    pub order_id: uuid::Uuid,
    #[serde(rename = "orderNumber")]
    pub order_number: String,
    #[serde(rename = "profile", skip_serializing_if = "Option::is_none")]
    pub profile: Option<Box<models::DePeriodMittwaldPeriodV1PeriodOrderPeriodProfile>>,
    #[serde(rename = "status")]
    pub status: models::DePeriodMittwaldPeriodV1PeriodOrderPeriodOrderStatus,
    #[serde(rename = "summary")]
    pub summary: Box<models::DePeriodMittwaldPeriodV1PeriodOrderPeriodOrderSummary>,
    #[serde(rename = "type")]
    pub r#type: models::DePeriodMittwaldPeriodV1PeriodOrderPeriodOrderType,
}

impl DePeriodMittwaldPeriodV1PeriodOrderPeriodCustomerOrder {
    pub fn new(customer_id: String, invoicing_period: f64, items: Vec<models::DePeriodMittwaldPeriodV1PeriodOrderPeriodOrderItem>, order_id: uuid::Uuid, order_number: String, status: models::DePeriodMittwaldPeriodV1PeriodOrderPeriodOrderStatus, summary: models::DePeriodMittwaldPeriodV1PeriodOrderPeriodOrderSummary, r#type: models::DePeriodMittwaldPeriodV1PeriodOrderPeriodOrderType) -> DePeriodMittwaldPeriodV1PeriodOrderPeriodCustomerOrder {
        DePeriodMittwaldPeriodV1PeriodOrderPeriodCustomerOrder {
            contract_change_contract_id: None,
            customer_id,
            due_date: None,
            invoicing_period,
            items,
            order_date: None,
            order_id,
            order_number,
            profile: None,
            status,
            summary: Box::new(summary),
            r#type,
        }
    }
}

