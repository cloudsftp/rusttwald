/*
 * Mittwald API
 *
 * ## Introduction  This OpenAPI spec documents the mittwald API. It follows the [OpenAPI 3.0.0 specification](https://spec.openapis.org/oas/v3.0.0.html).  ## Authentication  You will need an API token to access the API. You can obtain one by logging into the [mStudio](https://studio.mittwald.de) and navigating to the [\"API Tokens\" section in the user menu](https://studio.mittwald.de/app/profile/api-tokens).  When making requests to the API, you can authenticate by passing your API token in the `X-Access-Token` header or as a bearer token.  ## Rate Limiting  Please note that usage of the API is rate-limited to prevent abuse. You can inspect the rate limiting for your current user by observing the `X-Ratelimit-*` headers included in each response.  ## mStudio  A main consumer of the mittwald API is the management interface for our customers, the [mStudio](https://studio.mittwald.de).  ## Contact and support  For support, please use the [mStudio support area](https://studio.mittwald.de/app/support/conversations) or drop us an email at [support@mittwald.de](mailto:support@mittwald.de).  For security issues, please report to [security@mittwald.de](mailto:security@mittwald.de). 
 *
 * The version of the OpenAPI document: 2.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DePeriodMittwaldPeriodV1PeriodCustomerPeriodCustomer {
    #[serde(rename = "activeSuspension", skip_serializing_if = "Option::is_none")]
    pub active_suspension: Option<Box<models::DeMittwaldV1CustomerCustomerActiveSuspension>>,
    #[serde(rename = "avatarRefId", skip_serializing_if = "Option::is_none")]
    pub avatar_ref_id: Option<String>,
    #[serde(rename = "categoryId", skip_serializing_if = "Option::is_none")]
    pub category_id: Option<String>,
    #[serde(rename = "creationDate")]
    pub creation_date: String,
    #[serde(rename = "customerId")]
    pub customer_id: String,
    #[serde(rename = "customerNumber")]
    pub customer_number: String,
    #[serde(rename = "executingUserRoles", skip_serializing_if = "Option::is_none")]
    pub executing_user_roles: Option<Vec<models::DePeriodMittwaldPeriodV1PeriodCustomerPeriodRole>>,
    #[serde(rename = "isBanned", skip_serializing_if = "Option::is_none")]
    pub is_banned: Option<bool>,
    #[serde(rename = "isInDefaultOfPayment", skip_serializing_if = "Option::is_none")]
    pub is_in_default_of_payment: Option<bool>,
    #[serde(rename = "memberCount")]
    pub member_count: i32,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "owner", skip_serializing_if = "Option::is_none")]
    pub owner: Option<Box<models::DePeriodMittwaldPeriodV1PeriodCustomerPeriodContact>>,
    #[serde(rename = "projectCount")]
    pub project_count: i32,
    #[serde(rename = "vatId", skip_serializing_if = "Option::is_none")]
    pub vat_id: Option<String>,
    #[serde(rename = "vatIdValidationState", skip_serializing_if = "Option::is_none")]
    pub vat_id_validation_state: Option<VatIdValidationState>,
}

impl DePeriodMittwaldPeriodV1PeriodCustomerPeriodCustomer {
    pub fn new(creation_date: String, customer_id: String, customer_number: String, member_count: i32, name: String, project_count: i32) -> DePeriodMittwaldPeriodV1PeriodCustomerPeriodCustomer {
        DePeriodMittwaldPeriodV1PeriodCustomerPeriodCustomer {
            active_suspension: None,
            avatar_ref_id: None,
            category_id: None,
            creation_date,
            customer_id,
            customer_number,
            executing_user_roles: None,
            is_banned: None,
            is_in_default_of_payment: None,
            member_count,
            name,
            owner: None,
            project_count,
            vat_id: None,
            vat_id_validation_state: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum VatIdValidationState {
    #[serde(rename = "valid")]
    Valid,
    #[serde(rename = "invalid")]
    Invalid,
    #[serde(rename = "pending")]
    Pending,
    #[serde(rename = "unspecified")]
    Unspecified,
}

impl Default for VatIdValidationState {
    fn default() -> VatIdValidationState {
        Self::Valid
    }
}

